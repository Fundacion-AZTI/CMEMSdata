[["index.html", "Download and prepare data from the Copernicus Marine Environment Monitoring Service (CMEMS) About", " Download and prepare data from the Copernicus Marine Environment Monitoring Service (CMEMS) AZTI 2025-05-07 About This is a short tutorial explaining how to download and prepare data from the Copernicus Marine Environment Monitoring Service (CMEMS). The code is available in AZTI’s github repository and the book is readily available here.This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0) To cite this book, please use: XX "],["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction The Copernicus Marine Environment Monitoring Service (CMEMS) provides a wide range of data products for the global ocean. The data is available through the CMEMS website, but can also be accessed programmatically using the CMEMS API. The Copernicus Marine Toolbox is a free and easy-to-use tool that interoperates with the Copernicus Marine Data Store intending to cover any use case, from retrieval of metadata to a complete dataset, or just a subset, for any type of product: numerical models, satellite and/or in situ observations. It is written in Python, but All the data available are in NetCDF format. We provide examples of how to read and work with these files and merge them with other data sources. library(ggplot2) "],["download.html", "Chapter 2 Download 2.1 Register 2.2 Installation 2.3 Set up the Python environment 2.4 Explore the Marine Copernicus Data Store 2.5 Download the data (single file) 2.6 Download the data (multiple files)", " Chapter 2 Download The Copernicus Marine Toolbox is originally written in Python. There is also a new R package aimed to download and import data into R without the need of external software (see the CopernicusMarine R package); however, at the moment we write this tutorial, this R package is still in development and several features need to be added. For that reason, we are going to use the reticulate R package, which provides an interface to Python modules, classes, and functions from R. For more information on how to use the Copernicus Marine Toolbox in R, see the official documentation. 2.1 Register You need to register in the Copernicus Marine Service to get access to the data. You can register here. You must remember your username and password! Of course, you can ignore this step in case you already have an account. 2.2 Installation Install the reticulate package and then load the package: install.packages(&quot;reticulate&quot;) library(&quot;reticulate&quot;) The next step is to install Phyton (in case you do not have it). This should be only done once. This can be easily done by running the following line (it may take a few minutes): reticulate::install_python() 2.3 Set up the Python environment Now we create a dedicated Python virtual environment for the Copernicus Marine Toolbox. Using a separate environment ensures a clean, isolated space where the package and its dependencies will not interfere with other projects. entorno = &quot;DownloadCopernicus&quot; virtualenv_create(envname = entorno) virtualenv_install(entorno, packages = c(&quot;copernicusmarine&quot;)) use_virtualenv(entorno, required = TRUE) Then, we store the copernicusmarine package in a variable to use the toolbox’s various functions: atributos_cms &lt;- import(module = &quot;copernicusmarine&quot;) We also need to provide the username and password of our account created in the first step. This should be only done if you have never used the toolbox before and never entered your login details: atributos_cms$login(&quot;username&quot;, &quot;password&quot;) 2.4 Explore the Marine Copernicus Data Store We highly recommend exploring the Marine Copernicus Data Store. Each product has a manual with all the needed information. You must be particularly familiar with the temporal and spatial range and resolution of the chosen dataset, the dataset ID, and the variable names. 2.5 Download the data (single file) Here, you are going to download the oceanographic data from the CMEMS. This data will be saved to a single netCDF file in a specified directory. We provide an example: atributos_cms$subset( dataset_id = &quot;cmems_mod_glo_phy_my_0.083deg_P1D-m&quot;, variables = list(&quot;thetao&quot;), minimum_longitude = -83, maximum_longitude = -69, minimum_latitude = -19, maximum_latitude = -3, start_datetime = format(x = as.Date(&quot;2015-02-01&quot;), format = &quot;%Y-%m-%dT00:00:00&quot;), end_datetime = format(x = as.Date(&quot;2015-04-30&quot;), format = &quot;%Y-%m-%dT00:00:00&quot;), minimum_depth = 0, maximum_depth = 100, output_directory = &quot;C:/Use/env_data/&quot; ) In this example, we are downloading daily data from the GLORYS12V1 product. The variable is potential temperature (thetao), the spatial extent is between -83 and -69 degrees longitude and between -19 and -3 degrees latitude, and the temporal extent is between 2015-02-01 and 2015-04-30. The data (.nc file) will be saved in the specified directory. We also specify the depth range (0-100 m), although that can be omitted in case we want to download all the depth layers. 2.6 Download the data (multiple files) In case you want to download the data and save it in multiple files, you can adapt the previous example to work in a loop. We have done that in a wrapper function called downloadCOPERNICUS (you can find it here): First, let’s load the function directly from Github and required library: source(&quot;https://raw.githubusercontent.com/GiancarloMCorrea/extractOceanVariables/refs/heads/main/code/copernicus/multiple/downloadCOPERNICUS.R&quot;) library(&quot;lubridate&quot;) Then, download the data: downloadCOPERNICUS( xlim = c(-83, -69), ylim = c(-19, -3), datelim = c(&quot;2015-02-01&quot;, &quot;2015-04-30&quot;), depthlim = c(0, 100), field = &quot;thetao&quot;, dataid = &quot;cmems_mod_glo_phy_my_0.083deg_P1D-m&quot;, savedir = &quot;C:/Use/env_data/&quot; ) This function will download the oceanographic data and save it in several .nc files. For the example above, three .nc files will be created: 2015-02-01.nc 2015-03-01.nc 2015-04-01.nc As you may see, each .nc file will contain the data for a specific month. Note that the information contained in each netCDF file may have several time layers (e.g., daily temporal resolution) or a single time layer (e.g., monthly temporal resolution). "],["see-structure-of-netcdf-files.html", "Chapter 3 See structure of NetCDF files", " Chapter 3 See structure of NetCDF files Write here a brief intro "],["read-and-work-with-netcdf-files.html", "Chapter 4 Read and work with NetCDF files", " Chapter 4 Read and work with NetCDF files Write here a brief intro "],["extract-the-information-from-the-netcdf-files.html", "Chapter 5 Extract the information from the netCDF files 5.1 Read your observations 5.2 Extract oceanographic data 5.3 Plot the extracted oceanographic information 5.4 Imputation of missing information", " Chapter 5 Extract the information from the netCDF files Once you have downloaded the oceanographic data, you will probably want to extract information for a set of observations. In this section, we present a simple way to do this extraction. 5.1 Read your observations Let’s assume you have your observations saved as a CSV file. We are going to use this dataset as example. The first step is to read the CSV file: require(readr) my_data = read_delim(&quot;https://raw.githubusercontent.com/GiancarloMCorrea/extractOceanVariables/refs/heads/main/data/example_data.csv&quot;, delim=&quot;;&quot;) head(my_data) ## # A tibble: 6 × 3 ## Lon_M Lat_M Date ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; ## 1 -81.1 -3.45 2015-02-20 ## 2 -81.6 -3.45 2015-02-20 ## 3 -81.2 -3.45 2015-02-20 ## 4 -81.6 -3.44 2015-02-20 ## 5 -81.1 -3.45 2015-02-20 ## 6 -81.8 -3.44 2015-02-20 This dataset may have several columns, but it should have at least three columns with the following information: longitude (numeric), latitude (numeric), and date (character, %Y-%m-%d). There should not be missing information (i.e., NA) for these three columns. 5.2 Extract oceanographic data To extract the oceanographic data, we will use the matchCOPERNICUS function (you can find it here). The instructions provided below work when downloading multiple .nc files as explained in Section 2.6. matchCOPERNICUS creates a new column in your observations dataframe (i.e., my_data) with the oceanographic variable that corresponds to the longitude/latitude/date combination of every row. Before extracting the oceanographic variable, we will load the matchCOPERNICUS, required libraries, and some auxiliary functions directly from Github: source(&quot;https://raw.githubusercontent.com/GiancarloMCorrea/extractOceanVariables/refs/heads/main/code/copernicus/multiple/matchCOPERNICUS.R&quot;) source(&quot;https://raw.githubusercontent.com/GiancarloMCorrea/extractOceanVariables/refs/heads/main/code/auxFunctions.R&quot;) require(dplyr) require(lubridate) require(stars) Then, we extract the data: my_data = matchCOPERNICUS( data = my_data, lonlat_cols = c(&quot;Lon_M&quot;, &quot;Lat_M&quot;), date_col = &quot;Date&quot;, var_label = &quot;sst&quot;, var_path = &quot;C:/Use/env_data/&quot;, depth_FUN = &quot;mean&quot;, depth_range = c(0, 25) ) data is the dataframe with the observations. lonlat_cols is a character vector with the column names of the longitude and latitude in data. date_cols is a character with the column name of the date in data. var_label is the name of the column that will be created with the oceanographic data. It does not need to be the same as the variable name you are extracting. var_path is the path where the .nc files are saved. Since we are matching information using longitude/latitude/date, the depth dimension needs to be summarized somehow. depth_FUN is the function that will be applied to summarize all the information within the depth_range vector (in meters). For monthly oceanographic data, matchCOPERNICUS will extract the information for the corresponding month. matchCOPERNICUS has also another argument called nc_dimnames: matchCOPERNICUS( ..., nc_dimnames = c(&quot;x&quot;, &quot;y&quot;, &quot;time&quot;) ) Which is a character vector with the longitude, latitude, and date dimension names in the .nc files. By default, it is set to c(\"x\", \"y\", \"time\"), but you can change it if needed. 5.3 Plot the extracted oceanographic information It is always important to plot the extracted environmental variable to check if the matching has been correctly done. First, let’s create a new column containing the month for every row: my_data = my_data %&gt;% mutate(month = floor_date(as.Date(Date, format = &quot;%Y-%m-%d&quot;), &quot;month&quot;)) Then, we could make a simple plot using the ggplot2 package: require(sf) require(viridis) require(ggplot2) # Find longitude and latitude ranges in our observations xLim = range(my_data$Lon_M) + 0.5*c(-1, 1) yLim = range(my_data$Lat_M) + 0.5*c(-1, 1) # Transform our observations to sf point object: MyPoints = my_data %&gt;% st_as_sf(coords = c(&quot;Lon_M&quot;, &quot;Lat_M&quot;), crs = 4326, remove = FALSE) # Get worldmap object: worldmap = ggplot2::map_data(&quot;world&quot;) colnames(worldmap) = c(&quot;X&quot;, &quot;Y&quot;, &quot;PID&quot;, &quot;POS&quot;, &quot;region&quot;, &quot;subregion&quot;) # Make plot: ggplot() + geom_sf(data = MyPoints, aes(color = sst), size = 0.5) + scale_colour_viridis() + geom_polygon(data = worldmap, aes(X, Y, group=PID), fill = &quot;gray60&quot;, color=NA) + coord_sf(expand = FALSE, xlim = xLim, ylim = yLim) + xlab(NULL) + ylab(NULL) + theme_classic() + facet_wrap(~ month) 5.4 Imputation of missing information In some cases, there may be NA when extracting the oceanographic data. We could fill these NA using the mean value around the location with missing information. We have made an R function, called fill_NAvals to do so (you can find it here and was loaded above). my_data = fill_NAvals( data = my_data, lonlat_cols = c(&quot;Lon_M&quot;, &quot;Lat_M&quot;), var_col = &quot;sst&quot;, group_col = &quot;month&quot;, radius = 10 ) data is the dataframe with the observations. lonlat_cols is a character vector with the column names of the longitude and latitude in data. var_col is a character with the column name of the oceanographic variable in data. group_col is the name of the column that will be used as grouping. For example, we might only want to average month-specific locations when filling NA. radius defines the radius (km) around the location with missing information to calculate the average. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
